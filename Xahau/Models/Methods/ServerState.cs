using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// https://github.com/XRPLF/xrpl.js/blob/main/packages/xrpl/src/models/methods/serverState.ts

namespace Xahau.Models.Methods
{
    /// <summary>
    /// The `server_info` command asks the server for a human-readable version of  various information about the rippled server being queried.<br/>
    /// Expects a  response in the form of a {@link ServerInfoResponse}.
    /// </summary>
    public class ServerStateRequest : BaseRequest
    {
        public ServerStateRequest()
        {
            Command = "server_state";
        }
    }

    public class ServerState //todo rename to ServerInfoResponse extends BaseResponse 
    {
        [JsonProperty("state")]
        public State State { get; set; }
    }

    public class State
    {
        /// <summary>
        /// The version number of the running rippled version.
        /// </summary>
        [JsonProperty("build_version")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database.
        /// </summary>
        [JsonProperty("complete_ledgers")]
        public string CompleteLedgers { get; set; }

        /// <summary>
        /// Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database.
        /// </summary>
        [JsonProperty("closed_ledger")]
        public StateLedger ClosedLedger { get; set; }

        /// <summary>
        /// Amount of time spent waiting for I/O operations, in milliseconds.<br/>
        /// If this number is not very, very low, then the rippled server is probably having serious load issues.
        /// </summary>
        [JsonProperty("io_latency_ms")]
        public int IoLatencyMs { get; set; }

        /// <summary>
        /// Amount of time spent waiting for I/O operations, in milliseconds.<br/>
        /// If this number is not very, very low, then the rippled server is probably having serious load issues.
        /// </summary>
        [JsonProperty("jq_trans_overflow")]
        public string JqTransOverflow { get; set; }

        /// <summary>
        /// Information about the last time the server closed a ledger,
        /// including the amount of time it took to reach a consensus and the number of trusted validators participating.
        /// </summary>
        [JsonProperty("last_close")]
        public LastClose LastClose { get; set; }

        /// <summary>
        /// (Admin only) Detailed information about the current load state of the server.
        /// </summary>
        [JsonProperty("load")]
        public Load Load { get; set; }

        [JsonProperty("load_base")]
        public double LoadBase { get; set; }

        /// <summary>
        /// The load-scaled open ledger transaction cost the server is currently enforcing, as a multiplier on the base transaction cost.<br/>
        /// For example, at 1000 load factor and a reference transaction cost of 10 drops of XRP, the load-scaled transaction cost is 10,000 drops (0.01 XRP).<br/>
        /// The load factor is determined by the highest of the individual server's load factor,
        /// the cluster's load factor, the open ledger cost and the overall network's load factor.
        /// </summary>
        [JsonProperty("load_factor")]
        public double? LoadFactor { get; set; }

        [JsonProperty("load_factor_fee_escalation")]
        public double? LoadFactorFeeEscalation { get; set; }

        [JsonProperty("load_factor_fee_queue")]
        public double? LoadFactorFeeQueue { get; set; }

        [JsonProperty("load_factor_fee_reference")]
        public double? LoadFactorFeeReference { get; set; }

        [JsonProperty("load_factor_server")]
        public double? LoadFactorServer { get; set; }

        /// <summary>
        /// How many other rippled servers this one is currently connected to.
        /// </summary>
        [JsonProperty("peers")]
        public int Peers { get; set; }

        /// <summary>
        /// Public key used to verify this server for peer-to-peer communications.<br/>
        /// This node key pair is automatically generated by the server the first   time it starts up.<br/>
        /// (If deleted, the server can create a new pair of Keys).
        /// </summary>
        [JsonProperty("pubkey_node")]
        public string PubkeyNode { get; set; }

        /// <summary>
        /// Public key used by this node to sign ledger validations.
        /// </summary>
        [JsonProperty("pubkey_validator")]
        public string PubkeyValidator { get; set; }

        /// <summary>
        /// A string indicating to what extent the server is participating in the   network.
        /// </summary>
        [JsonProperty("server_state")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ServerStateInner ServerState { get; set; }

        [JsonProperty("server_state_duration_us")]
        public double ServerStateDurationUs { get; set; }

        /// <summary>
        /// A map of various server states with information about the time the   server spends in each.<br/>
        /// This can be useful for tracking the long-term   health of your server's connectivity to the network.
        /// </summary>
        [JsonProperty("state_accounting")]
        public AccountingStateSummary AccountingStateSummary { get; set; }

        [JsonProperty("time")]
        public string Time { get; set; }

        /// <summary>
        /// Number of consecutive seconds that the server has been operational.
        /// </summary>
        [JsonProperty("uptime")]
        public int Uptime { get; set; }

        [JsonIgnore]
        public TimeSpan UptimeTimeSpan => TimeSpan.FromSeconds(Uptime);

        /// <summary>
        /// Information about the most recent fully-validated ledger.
        /// </summary>
        [JsonProperty("validated_ledger")]
        public StateLedger ValidatedLedger { get; set; }

        /// <summary>
        /// Minimum number of trusted validations required to validate a ledger   version.<br/>
        /// Some circumstances may cause the server to require more   validations.
        /// </summary>
        [JsonProperty("validation_quorum")]
        public int ValidationQuorum { get; set; }

        /// <summary>
        /// Either the human readable time, in UTC, when the current validator list will expire,
        /// the string unknown if the server has yet to load a published validator list or the string never if the server uses a static validator list.
        /// </summary>
        [JsonProperty("validator_list_expires")]
        public string ValidatorListExpires { get; set; }
    }

    /// <summary>
    /// Information about the most recent fully-validated ledger.
    /// </summary>
    public class StateLedger
    {
        /// <summary>
        /// The time since the ledger was closed, in seconds.
        /// </summary>
        [JsonProperty("age")]
        public int Age { get; set; }

        [JsonIgnore]
        public TimeSpan AgeTimeSpan => TimeSpan.FromSeconds(Age);

        /// <summary>
        /// Base fee, in XRP.<br/>
        /// This may be represented in scientific notation.<br/>
        /// Such as 1e-05 for 0.00005.
        /// </summary>
        [JsonProperty("base_fee")]
        public double BaseFee { get; set; }

        /// <summary>
        /// Unique hash for the ledger, as hexadecimal.
        /// </summary>
        [JsonProperty("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Minimum amount of XRP (not drops) necessary for every account to.<br/>
        /// Keep in reserve.
        /// </summary>
        [JsonProperty("reserve_base")]
        public uint ReserveBase { get; set; }

        /// <summary>
        /// Amount of XRP (not drops) added to the account reserve for each  object an account owns in the ledger.
        /// </summary>
        [JsonProperty("reserve_inc")]
        public uint ReserveInc { get; set; }

        /// <summary>
        /// The ledger index of the latest validated ledger.
        /// </summary>
        [JsonProperty("seq")]
        public int Sequence { get; set; }
    }
}
